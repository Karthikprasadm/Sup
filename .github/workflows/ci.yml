name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Tests (Python ${{ matrix.python }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: ["3.11"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov ruff mypy
          python -m pip install -e ./sup-lang

      - name: Lint (ruff)
        run: |
          ruff check sup-lang/sup || true

      - name: Type check (mypy)
        run: |
          mypy sup-lang/sup || true

      - name: Run tests
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=sup-lang/sup --cov-report=term-missing sup-lang

  conformance:
    name: Conformance (spec suite)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install
        run: |
          python -m pip install -U pip
          python -m pip install -e ./sup-lang pytest
      - name: Run conformance tests
        run: |
          pytest -q sup-lang

  perf:
    name: Perf benchmarks
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install
        run: |
          python -m pip install -U pip
          python -m pip install -e ./sup-lang
          python -c "import sup, sys; print('sup import ok', sup.__version__)"
      - name: Run benchmarks
        run: |
          python - <<'PY'
          import time, statistics as stats, json
          from sup.cli import run_source
          code = (
              "sup\n"
              "set total to 0\n"
              "repeat 20000 times\n"
              "set total to add total and 3\n"
              "endrepeat\n"
              "bye\n"
          )
          def run_case(src: str, warmup: int = 2, iters: int = 5):
              for _ in range(max(0, warmup)):
                  run_source(src)
              times = []
              for _ in range(max(1, iters)):
                  t0 = time.perf_counter()
                  run_source(src)
                  times.append(time.perf_counter() - t0)
              return {
                  "min": min(times),
                  "median": stats.median(times),
                  "mean": sum(times) / len(times),
                  "max": max(times),
              }
          results = {"cases": {"arith_loop": run_case(code)}, "warmup": 2, "iters": 5}
          with open("perf.json", "w", encoding="utf-8") as f:
              json.dump(results, f)
          print(json.dumps(results))
          PY
      - name: Enforce performance budgets
        run: |
          python - <<'PY'
          import json, sys
          data = json.load(open("perf.json", "r", encoding="utf-8"))
          med = data["cases"]["arith_loop"]["median"]
          budget = 0.20
          print(f"arith_loop median {med:.6f}s (budget {budget:.2f}s)")
          sys.exit(0 if med <= budget else 1)
          PY
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: perf.json
          path: perf.json


